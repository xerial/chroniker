package xerial.chroniker

// This class will be generated by `ck import td:sample_dataset` command:
object sample_dataset
{
  class Nasdaq extends Frame[Nasdaq]
  {
    val time = Column[Nasdaq, Long]("time")
    val symbol = Column[Nasdaq, String]("symbol")
    val open = Column[Nasdaq, Double]("open")
    val volume = Column[Nasdaq, String]("volume")
    val high = Column[Nasdaq, Double]("high")
    val low = Column[Nasdaq, Double]("low")
    val close = Column[Nasdaq, Double]("close")

    val * = Seq(time, symbol, open, volume, high, low, close)
  }

  val nasdaq = new Nasdaq
}

import sample_dataset._
import Schedule._

object Example
{
  // SELECT count(*) FROM nasdaq
  def dataCount = nasdaq.size

  // SELECT time, close FROM nasdaq WHERE symbol = 'APPL'
  def appleStock = nasdaq.filter(_.symbol is "APPL").select(_.time, _.close)

  // You can use a raw SQL statement as well:
  def appleStockSQL = sql"SELECT time, close FROM nasdaq where symbol = 'APPL'".as[Nasdaq]

  // SELECT time, close FROM nasdaq WHERE symbol = 'APPL' LIMIT 10
  appleStock.limit(10).print

  appleStockSQL.limit(5).print

  // time-column based filtering
  def recentAppleStock(scheduledTime:Schedule) = appleStock.between(scheduledTime, scheduledTime + 1.month)

  def multipleResults = {
    for(company <- Seq("YHOO", "GOOG", "MSFT")) yield {
      nasdaq.filter(_.symbol is company).selectAll
    }
  }

}

object RunnerExample {

  val td = new TDExecutor

  Example.recentAppleStock(today).run(td)


}

