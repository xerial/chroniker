package xerial.chroniker

// This class will be generated by `ck import td:sample_dataset` command:
object sample_dataset
{
  class nasdaq extends Table[nasdaq]
  {
    val time = Column[Long]("time")
    val symbol = Column[String]("symbol")
    val open = Column[Double]("open")
    val volume = Column[String]("volume")
    val high = Column[Double]("high")
    val low = Column[Double]("low")
    val close = Column[Double]("close")
  }

  val nasdaq = new nasdaq
}

import sample_dataset._

object Example
{
  // SELECT count(*) FROM nasdaq
  def dataCount = nasdaq.size

  // SELECT time, close FROM nasdaq WHERE symbol = 'APPL'
  def appleStock = nasdaq.filter(_.symbol === "APPL").select(_.time, _.close)

  // You can use a raw SQL statement as well:
  def appleStockSQL = sql"SELECT time, close FROM nasdaq where symbol = 'APPL'".as[nasdaq]

  // SELECT time, close FROM nasdaq WHERE symbol = 'APPL' LIMIT 10
  appleStock.limit(10).print

  appleStockSQL.limit(5).print

  // time-column based filtering
  def recentAppleStock = appleStock.between(SCHEDULED_TIME, SCHEDULED_TIME + 1.month)

  def multipleResults = {
    Seq("YHOO", "GOOG", "MSFT").map { company =>
      company -> nasdaq
              .filter(_.symbol == company)
              .select(_.time, _.close)
    }
  }


  val td = new TDExecutor
  recentAppleStock.run(td)
}

